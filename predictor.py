# -*- coding: utf-8 -*-
"""Predictor.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IlrM1wRawG8b6U2VB_jX_LFbNxuiXpJR
"""

import pandas as pd
#importung panda library

matches = pd.read_csv("/content/Matches_predict.csv", index_col=0 )
#importing file into the notebook

matches.head()
#displaying the first few lines of cthe table

matches.shape
#total number of records in the table

38 * 20 * 2
# we have 38 games played with 20 teams in the league and have the data for 2 seasons, therefore the total number of matches played is 1520 matches.

matches["team"].value_counts()
#counting the number of matches played by each team

# This shows while majority of the teams have played around 72 games, a few have played around 38 games. While this is alright because the EPL follows a relagtion format,
# where 3 bottom placed teams are relegate each year, but liverpool wasnt relegated, so theres missing values for the team liverpool.

matches[matches["team"] == 'Liverpool' ]
# shows the matches played by liverpool, showing only 38 rows, while the rest is missing

matches["round"].value_counts()

#Cleaning the data before applying ML Algorithms

matches.dtypes

matches["date"] = pd.to_datetime(matches["date"])
# Converting the date column to a date time datatype and overwriting the column datatype.

matches["venue_code"] = matches["venue"].astype("category").cat.codes
# Creating an unique code based for home and away played matches.

matches["opp_code"] = matches["opponent"].astype("category").cat.codes
# Creating an unique code based for each opponent.

matches["hour"] = matches["time"].str.replace(":+", "", regex=True).astype("int")

matches["day_code"] = matches["date"].dt.dayofweek
# Creating an unique code based for day of the week

matches["Target"] = (matches["result"] == "W").astype("int")
#Assigning a number to the wins and losses, 1 for W and 0 for losses and draws to predict the number of wins

# Creating ML Model
# Importing RandomForestClassifier to pick up non linear irregularities in the data.
from sklearn.ensemble import RandomForestClassifier

rf = RandomForestClassifier(n_estimators=50, min_samples_split=10, random_state=1)

train = matches[matches["date"] < '2022-01-01']
test = matches[matches["date"] > '2022-01-01']

predictors = ["venue_code", "opp_code", "hour", "day_code"]

rf.fit(train[predictors], train["Target"])

predictions = rf.predict(test[predictors])

from sklearn.metrics import accuracy_score

acc = accuracy_score(test["Target"], predictions)
acc

combined = pd.DataFrame(dict(actual=test["Target"], prediction=predictions))
pd.crosstab(index=combined["actual"], columns=combined["prediction"])

from sklearn.metrics import precision_score

precision_score(test["Target"], predictions)

#Improving precision and accuracy

grouped_matches = matches.groupby("team")

group = grouped_matches.get_group("Manchester City")
group

def rolling_averages(group, cols, new_cols):
    group = group.sort_values("date")
    rolling_stats = group[cols].rolling(3, closed='left').mean()
    group[new_cols] = rolling_stats
    group = group.dropna(subset=new_cols)
    return group

cols = ["gf", "ga", "sh", "sot", "dist", "fk", "pk", "pkatt"]
new_cols = [f"{c}_rolling" for c in cols]

rolling_averages(group, cols, new_cols)

matches_rolling = matches.groupby("team").apply(lambda x: rolling_averages(x, cols, new_cols))
matches_rolling

matches_rolling = matches_rolling.droplevel('team')
matches_rolling

matches_rolling.index = range(matches_rolling.shape[0])

def make_predictions(data, predictors):
    train = data[data["date"] < '2022-01-01']
    test = data[data["date"] > '2022-01-01']
    rf.fit(train[predictors], train["target"])
    preds = rf.predict(test[predictors])
    combined = pd.DataFrame(dict(actual=test["target"], predicted=preds), index=test.index)
    precision = precision_score(test["target"], preds)
    return combined, precision

combined, precision = make_predictions(matches_rolling, predictors + new_cols)
precision

combined = combined.merge(matches_rolling[["date", "team", "opponent", "result"]], left_index=True, right_index=True)
combined

class MissingDict(dict):
    __missing__ = lambda self, key: key

map_values = {"Brighton and Hove Albion": "Brighton", "Leeds United": "Leeds Utd", "Manchester United": "Manchester Utd", "Newcastle United": "Newcastle Utd", "Tottenham Hotspur": "Tottenham", "West Ham United": "West Ham", "Wolverhampton Wanderers": "Wolves"}
mapping = MissingDict(**map_values)

combined["new_team"] = combined["team"].map(mapping)

combined

merged = combined.merge(combined, left_on=["date", "new_team"], right_on=["date", "opponent"])
merged

merged[(merged["predicted_x"] == 1) & (merged["predicted_y"] ==0)]["actual_x"].value_counts()

29/44